// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Security is an autogenerated mock type for the Security type
type Security struct {
	mock.Mock
}

type Security_Expecter struct {
	mock *mock.Mock
}

func (_m *Security) EXPECT() *Security_Expecter {
	return &Security_Expecter{mock: &_m.Mock}
}

// ComparePassword provides a mock function with given fields: hash, password
func (_m *Security) ComparePassword(hash string, password string) error {
	ret := _m.Called(hash, password)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Security_ComparePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComparePassword'
type Security_ComparePassword_Call struct {
	*mock.Call
}

// ComparePassword is a helper method to define mock.On call
//   - hash string
//   - password string
func (_e *Security_Expecter) ComparePassword(hash interface{}, password interface{}) *Security_ComparePassword_Call {
	return &Security_ComparePassword_Call{Call: _e.mock.On("ComparePassword", hash, password)}
}

func (_c *Security_ComparePassword_Call) Run(run func(hash string, password string)) *Security_ComparePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Security_ComparePassword_Call) Return(_a0 error) *Security_ComparePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Security_ComparePassword_Call) RunAndReturn(run func(string, string) error) *Security_ComparePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateToken provides a mock function with given fields: m
func (_m *Security) CreateToken(m map[string]interface{}) (string, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (string, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Security_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type Security_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - m map[string]interface{}
func (_e *Security_Expecter) CreateToken(m interface{}) *Security_CreateToken_Call {
	return &Security_CreateToken_Call{Call: _e.mock.On("CreateToken", m)}
}

func (_c *Security_CreateToken_Call) Run(run func(m map[string]interface{})) *Security_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *Security_CreateToken_Call) Return(_a0 string, _a1 error) *Security_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Security_CreateToken_Call) RunAndReturn(run func(map[string]interface{}) (string, error)) *Security_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePassword provides a mock function with given fields: password
func (_m *Security) GeneratePassword(password string) ([]byte, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePassword")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Security_GeneratePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePassword'
type Security_GeneratePassword_Call struct {
	*mock.Call
}

// GeneratePassword is a helper method to define mock.On call
//   - password string
func (_e *Security_Expecter) GeneratePassword(password interface{}) *Security_GeneratePassword_Call {
	return &Security_GeneratePassword_Call{Call: _e.mock.On("GeneratePassword", password)}
}

func (_c *Security_GeneratePassword_Call) Run(run func(password string)) *Security_GeneratePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Security_GeneratePassword_Call) Return(_a0 []byte, _a1 error) *Security_GeneratePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Security_GeneratePassword_Call) RunAndReturn(run func(string) ([]byte, error)) *Security_GeneratePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurity creates a new instance of Security. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurity(t interface {
	mock.TestingT
	Cleanup(func())
}) *Security {
	mock := &Security{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
