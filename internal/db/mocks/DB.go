// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	db "muzz/internal/db"

	mock "github.com/stretchr/testify/mock"

	model "muzz/internal/model"

	sql "database/sql"

	time "time"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: ctx
func (_m *DB) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type DB_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DB_Expecter) BeginTx(ctx interface{}) *DB_BeginTx_Call {
	return &DB_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *DB_BeginTx_Call) Run(run func(ctx context.Context)) *DB_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_BeginTx_Call) Return(_a0 *sql.Tx, _a1 error) *DB_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_BeginTx_Call) RunAndReturn(run func(context.Context) (*sql.Tx, error)) *DB_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: t
func (_m *DB) Commit(t db.Tx) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.Tx) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type DB_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - t db.Tx
func (_e *DB_Expecter) Commit(t interface{}) *DB_Commit_Call {
	return &DB_Commit_Call{Call: _e.mock.On("Commit", t)}
}

func (_c *DB_Commit_Call) Run(run func(t db.Tx)) *DB_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Tx))
	})
	return _c
}

func (_c *DB_Commit_Call) Return(_a0 error) *DB_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Commit_Call) RunAndReturn(run func(db.Tx) error) *DB_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, firstName, lastName, email, password, gender, dob
func (_m *DB) CreateUser(ctx context.Context, firstName string, lastName string, email string, password []byte, gender string, dob time.Time) (int, error) {
	ret := _m.Called(ctx, firstName, lastName, email, password, gender, dob)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, string, time.Time) (int, error)); ok {
		return rf(ctx, firstName, lastName, email, password, gender, dob)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, string, time.Time) int); ok {
		r0 = rf(ctx, firstName, lastName, email, password, gender, dob)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []byte, string, time.Time) error); ok {
		r1 = rf(ctx, firstName, lastName, email, password, gender, dob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type DB_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - firstName string
//   - lastName string
//   - email string
//   - password []byte
//   - gender string
//   - dob time.Time
func (_e *DB_Expecter) CreateUser(ctx interface{}, firstName interface{}, lastName interface{}, email interface{}, password interface{}, gender interface{}, dob interface{}) *DB_CreateUser_Call {
	return &DB_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, firstName, lastName, email, password, gender, dob)}
}

func (_c *DB_CreateUser_Call) Run(run func(ctx context.Context, firstName string, lastName string, email string, password []byte, gender string, dob time.Time)) *DB_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]byte), args[5].(string), args[6].(time.Time))
	})
	return _c
}

func (_c *DB_CreateUser_Call) Return(_a0 int, _a1 error) *DB_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string, []byte, string, time.Time) (int, error)) *DB_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// Discover provides a mock function with given fields: ctx, UserId
func (_m *DB) Discover(ctx context.Context, UserId int) ([]model.Discover, error) {
	ret := _m.Called(ctx, UserId)

	if len(ret) == 0 {
		panic("no return value specified for Discover")
	}

	var r0 []model.Discover
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.Discover, error)); ok {
		return rf(ctx, UserId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Discover); ok {
		r0 = rf(ctx, UserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Discover)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, UserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_Discover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discover'
type DB_Discover_Call struct {
	*mock.Call
}

// Discover is a helper method to define mock.On call
//   - ctx context.Context
//   - UserId int
func (_e *DB_Expecter) Discover(ctx interface{}, UserId interface{}) *DB_Discover_Call {
	return &DB_Discover_Call{Call: _e.mock.On("Discover", ctx, UserId)}
}

func (_c *DB_Discover_Call) Run(run func(ctx context.Context, UserId int)) *DB_Discover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *DB_Discover_Call) Return(_a0 []model.Discover, _a1 error) *DB_Discover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_Discover_Call) RunAndReturn(run func(context.Context, int) ([]model.Discover, error)) *DB_Discover_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPassword provides a mock function with given fields: ctx, email
func (_m *DB) GetUserPassword(ctx context.Context, email string) (*model.UserPassword, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPassword")
	}

	var r0 *model.UserPassword
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.UserPassword, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserPassword); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserPassword)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_GetUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPassword'
type DB_GetUserPassword_Call struct {
	*mock.Call
}

// GetUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *DB_Expecter) GetUserPassword(ctx interface{}, email interface{}) *DB_GetUserPassword_Call {
	return &DB_GetUserPassword_Call{Call: _e.mock.On("GetUserPassword", ctx, email)}
}

func (_c *DB_GetUserPassword_Call) Run(run func(ctx context.Context, email string)) *DB_GetUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DB_GetUserPassword_Call) Return(_a0 *model.UserPassword, _a1 error) *DB_GetUserPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_GetUserPassword_Call) RunAndReturn(run func(context.Context, string) (*model.UserPassword, error)) *DB_GetUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: tx, userID, long, lat
func (_m *DB) Login(tx *sql.Tx, userID int, long float64, lat float64) error {
	ret := _m.Called(tx, userID, long, lat)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int, float64, float64) error); ok {
		r0 = rf(tx, userID, long, lat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type DB_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - tx *sql.Tx
//   - userID int
//   - long float64
//   - lat float64
func (_e *DB_Expecter) Login(tx interface{}, userID interface{}, long interface{}, lat interface{}) *DB_Login_Call {
	return &DB_Login_Call{Call: _e.mock.On("Login", tx, userID, long, lat)}
}

func (_c *DB_Login_Call) Run(run func(tx *sql.Tx, userID int, long float64, lat float64)) *DB_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Tx), args[1].(int), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *DB_Login_Call) Return(_a0 error) *DB_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Login_Call) RunAndReturn(run func(*sql.Tx, int, float64, float64) error) *DB_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function with given fields: ctx, currentUserID, theirUserID
func (_m *DB) Match(ctx context.Context, currentUserID int, theirUserID int) (bool, error) {
	ret := _m.Called(ctx, currentUserID, theirUserID)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (bool, error)); ok {
		return rf(ctx, currentUserID, theirUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) bool); ok {
		r0 = rf(ctx, currentUserID, theirUserID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, currentUserID, theirUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type DB_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUserID int
//   - theirUserID int
func (_e *DB_Expecter) Match(ctx interface{}, currentUserID interface{}, theirUserID interface{}) *DB_Match_Call {
	return &DB_Match_Call{Call: _e.mock.On("Match", ctx, currentUserID, theirUserID)}
}

func (_c *DB_Match_Call) Run(run func(ctx context.Context, currentUserID int, theirUserID int)) *DB_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *DB_Match_Call) Return(_a0 bool, _a1 error) *DB_Match_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DB_Match_Call) RunAndReturn(run func(context.Context, int, int) (bool, error)) *DB_Match_Call {
	_c.Call.Return(run)
	return _c
}

// Swipe provides a mock function with given fields: ctx, currentUserID, theirUserID, swipeRight
func (_m *DB) Swipe(ctx context.Context, currentUserID int, theirUserID int, swipeRight bool) error {
	ret := _m.Called(ctx, currentUserID, theirUserID, swipeRight)

	if len(ret) == 0 {
		panic("no return value specified for Swipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool) error); ok {
		r0 = rf(ctx, currentUserID, theirUserID, swipeRight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Swipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Swipe'
type DB_Swipe_Call struct {
	*mock.Call
}

// Swipe is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUserID int
//   - theirUserID int
//   - swipeRight bool
func (_e *DB_Expecter) Swipe(ctx interface{}, currentUserID interface{}, theirUserID interface{}, swipeRight interface{}) *DB_Swipe_Call {
	return &DB_Swipe_Call{Call: _e.mock.On("Swipe", ctx, currentUserID, theirUserID, swipeRight)}
}

func (_c *DB_Swipe_Call) Run(run func(ctx context.Context, currentUserID int, theirUserID int, swipeRight bool)) *DB_Swipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(bool))
	})
	return _c
}

func (_c *DB_Swipe_Call) Return(_a0 error) *DB_Swipe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Swipe_Call) RunAndReturn(run func(context.Context, int, int, bool) error) *DB_Swipe_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
